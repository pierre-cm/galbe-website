---
import { Icon } from '@astrojs/starlight/components'
import type { Props } from '@astrojs/starlight/props'
---

<starlight-theme-select>
  <div class='selector'>
    <Icon name='sun' color='goldenrod' size='1.5rem' />
    <label class='switch'>
      <input type='checkbox' />
      <span class='slider round'></span>
    </label>
    <Icon name='moon' color='grey' size='1.5rem' />
  </div>
</starlight-theme-select>

<style>
  .selector {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.3rem;
  }
  .switch {
    position: relative;
    display: inline-block;
    width: 30px;
    height: 17px;
  }
  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    -webkit-transition: 0.2s;
    transition: 0.2s;
  }
  .slider:before {
    position: absolute;
    content: '';
    height: 13px;
    width: 13px;
    left: 2px;
    bottom: 2px;
    background-color: white;
    -webkit-transition: 0.2s;
    transition: 0.2s;
  }
  input:checked + .slider {
    background-color: #32a2b6;
  }
  input:focus + .slider {
    box-shadow: 0 0 1px #32a2b6;
  }
  input:checked + .slider:before {
    -webkit-transform: translateX(13px);
    -ms-transform: translateX(13px);
    transform: translateX(13px);
  }
  .slider.round {
    border-radius: 17px;
  }
  .slider.round:before {
    border-radius: 50%;
  }
</style>

<script>
  type Theme = 'auto' | 'dark' | 'light'

  class StarlightThemeSelect extends HTMLElement {
    #key = 'starlight-theme'

    constructor() {
      super()
      this.#onThemeChange(this.#loadTheme())
      const checkbox = this.querySelector('input')

      if (checkbox) {
        checkbox.addEventListener('change', e => {
          //@ts-ignore
          this.#onThemeChange(this.#parseTheme(e?.currentTarget?.checked ? 'dark' : 'light'))
        })
        checkbox.checked = this.#loadTheme() === 'dark'
      }
    }

    #parseTheme(theme: unknown): Theme {
      if (theme === 'auto' || theme === 'dark' || theme === 'light') {
        return theme
      } else {
        return 'auto'
      }
    }

    /** Get the preferred system color scheme. */
    #getPreferredColorScheme(): Theme {
      return matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark'
    }

    /** Update select menu UI, document theme, and local storage state. */
    #onThemeChange(theme: Theme): void {
      //   StarlightThemeProvider.updatePickers(theme)
      document.documentElement.dataset.theme = theme === 'auto' ? this.#getPreferredColorScheme() : theme
      this.#storeTheme(theme)
    }

    /** Store the user’s preference in `localStorage`. */
    #storeTheme(theme: Theme): void {
      if (typeof localStorage !== 'undefined') {
        if (theme === 'light' || theme === 'dark') {
          localStorage.setItem(this.#key, theme)
        } else {
          localStorage.removeItem(this.#key)
        }
      }
    }

    /** Load the user’s preference from `localStorage`. */
    #loadTheme(): Theme {
      const theme = typeof localStorage !== 'undefined' && localStorage.getItem(this.#key)
      return this.#parseTheme(theme)
    }
  }

  customElements.define('starlight-theme-select', StarlightThemeSelect)
</script>
